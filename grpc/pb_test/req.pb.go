// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.5.0
// source: req.proto

package pb_test

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query   string            `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Headers map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_req_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_req_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_req_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Request) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqQuery string               `protobuf:"bytes,1,opt,name=req_query,json=reqQuery,proto3" json:"req_query,omitempty"`
	X        *ItemDetail          `protobuf:"bytes,2,opt,name=x,proto3" json:"x,omitempty"`
	Succ     bool                 `protobuf:"varint,3,opt,name=succ,proto3" json:"succ,omitempty"`
	Time     *timestamp.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_req_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_req_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_req_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetReqQuery() string {
	if x != nil {
		return x.ReqQuery
	}
	return ""
}

func (x *Response) GetX() *ItemDetail {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *Response) GetSucc() bool {
	if x != nil {
		return x.Succ
	}
	return false
}

func (x *Response) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type MockPanicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MockPanicReq) Reset() {
	*x = MockPanicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_req_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockPanicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockPanicReq) ProtoMessage() {}

func (x *MockPanicReq) ProtoReflect() protoreflect.Message {
	mi := &file_req_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockPanicReq.ProtoReflect.Descriptor instead.
func (*MockPanicReq) Descriptor() ([]byte, []int) {
	return file_req_proto_rawDescGZIP(), []int{2}
}

type MockPanicRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MockPanicRsp) Reset() {
	*x = MockPanicRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_req_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockPanicRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockPanicRsp) ProtoMessage() {}

func (x *MockPanicRsp) ProtoReflect() protoreflect.Message {
	mi := &file_req_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockPanicRsp.ProtoReflect.Descriptor instead.
func (*MockPanicRsp) Descriptor() ([]byte, []int) {
	return file_req_proto_rawDescGZIP(), []int{3}
}

var File_req_proto protoreflect.FileDescriptor

var file_req_proto_rawDesc = []byte{
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x65, 0x71,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x6b, 0x67, 0x2f, 0x69, 0x74,
	0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65,
	0x71, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a,
	0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x0f, 0x10,
	0x10, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0c, 0x52, 0x02, 0x68, 0x61, 0x22, 0xa1, 0x01, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x01, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x75, 0x63, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x75, 0x63, 0x63, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x4a,
	0x04, 0x08, 0x09, 0x10, 0x0c, 0x52, 0x03, 0x66, 0x6f, 0x6f, 0x52, 0x03, 0x62, 0x61, 0x72, 0x22,
	0x0e, 0x0a, 0x0c, 0x4d, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x22,
	0x0e, 0x0a, 0x0c, 0x4d, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x52, 0x73, 0x70, 0x32,
	0x69, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x53, 0x53, 0x12, 0x27, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x0c, 0x2e, 0x72, 0x65, 0x71, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x65, 0x71, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x09, 0x4d, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x6e,
	0x69, 0x63, 0x12, 0x11, 0x2e, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x6e,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x6f, 0x63, 0x6b,
	0x50, 0x61, 0x6e, 0x69, 0x63, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x3b,
	0x70, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_req_proto_rawDescOnce sync.Once
	file_req_proto_rawDescData = file_req_proto_rawDesc
)

func file_req_proto_rawDescGZIP() []byte {
	file_req_proto_rawDescOnce.Do(func() {
		file_req_proto_rawDescData = protoimpl.X.CompressGZIP(file_req_proto_rawDescData)
	})
	return file_req_proto_rawDescData
}

var file_req_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_req_proto_goTypes = []interface{}{
	(*Request)(nil),             // 0: req.Request
	(*Response)(nil),            // 1: req.Response
	(*MockPanicReq)(nil),        // 2: req.MockPanicReq
	(*MockPanicRsp)(nil),        // 3: req.MockPanicRsp
	nil,                         // 4: req.Request.HeadersEntry
	(*ItemDetail)(nil),          // 5: item.ItemDetail
	(*timestamp.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_req_proto_depIdxs = []int32{
	4, // 0: req.Request.headers:type_name -> req.Request.HeadersEntry
	5, // 1: req.Response.x:type_name -> item.ItemDetail
	6, // 2: req.Response.time:type_name -> google.protobuf.Timestamp
	0, // 3: req.SearchSSS.Search:input_type -> req.Request
	2, // 4: req.SearchSSS.MockPanic:input_type -> req.MockPanicReq
	1, // 5: req.SearchSSS.Search:output_type -> req.Response
	3, // 6: req.SearchSSS.MockPanic:output_type -> req.MockPanicRsp
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_req_proto_init() }
func file_req_proto_init() {
	if File_req_proto != nil {
		return
	}
	file_inside_pkg_item_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_req_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_req_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_req_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockPanicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_req_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockPanicRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_req_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_req_proto_goTypes,
		DependencyIndexes: file_req_proto_depIdxs,
		MessageInfos:      file_req_proto_msgTypes,
	}.Build()
	File_req_proto = out.File
	file_req_proto_rawDesc = nil
	file_req_proto_goTypes = nil
	file_req_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SearchSSSClient is the client API for SearchSSS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchSSSClient interface {
	Search(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	MockPanic(ctx context.Context, in *MockPanicReq, opts ...grpc.CallOption) (*MockPanicRsp, error)
}

type searchSSSClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchSSSClient(cc grpc.ClientConnInterface) SearchSSSClient {
	return &searchSSSClient{cc}
}

func (c *searchSSSClient) Search(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/req.SearchSSS/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchSSSClient) MockPanic(ctx context.Context, in *MockPanicReq, opts ...grpc.CallOption) (*MockPanicRsp, error) {
	out := new(MockPanicRsp)
	err := c.cc.Invoke(ctx, "/req.SearchSSS/MockPanic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchSSSServer is the server API for SearchSSS service.
type SearchSSSServer interface {
	Search(context.Context, *Request) (*Response, error)
	MockPanic(context.Context, *MockPanicReq) (*MockPanicRsp, error)
}

// UnimplementedSearchSSSServer can be embedded to have forward compatible implementations.
type UnimplementedSearchSSSServer struct {
}

func (*UnimplementedSearchSSSServer) Search(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedSearchSSSServer) MockPanic(context.Context, *MockPanicReq) (*MockPanicRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MockPanic not implemented")
}

func RegisterSearchSSSServer(s *grpc.Server, srv SearchSSSServer) {
	s.RegisterService(&_SearchSSS_serviceDesc, srv)
}

func _SearchSSS_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchSSSServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/req.SearchSSS/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchSSSServer).Search(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchSSS_MockPanic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MockPanicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchSSSServer).MockPanic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/req.SearchSSS/MockPanic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchSSSServer).MockPanic(ctx, req.(*MockPanicReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SearchSSS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "req.SearchSSS",
	HandlerType: (*SearchSSSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SearchSSS_Search_Handler,
		},
		{
			MethodName: "MockPanic",
			Handler:    _SearchSSS_MockPanic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "req.proto",
}
